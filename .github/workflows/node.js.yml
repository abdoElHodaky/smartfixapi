# .github/workflows/ci-cd.yml
name: SmartFix API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # ================================
  # SETUP & VALIDATION JOB
  # ================================
  setup:
    name: 🔧 Setup & Validate
    runs-on: ubuntu-latest
    
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Cache Dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: 🔍 Install Dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        npm ci --prefer-offline --no-audit
        
    - name: 📋 Verify Package.json
      run: |
        echo "Validating package.json structure..."
        node -e "const pkg = require('./package.json'); console.log('✅ Package name:', pkg.name); console.log('✅ Version:', pkg.version);"
        
    - name: 🔧 Validate TypeScript Config
      run: |
        echo "Validating TypeScript configuration..."
        npx tsc --noEmit --project tsconfig.json
        echo "✅ TypeScript configuration is valid"

  # ================================
  # CODE QUALITY & LINTING JOB
  # ================================
  lint:
    name: 🧹 Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏷️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Restore Dependencies
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: 🔍 Install Dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit

    - name: 🧹 ESLint Check
      run: |
        echo "Running ESLint..."
        npm run lint
        echo "✅ ESLint passed"

    - name: 💅 Prettier Check
      run: |
        echo "Checking code formatting..."
        npm run format:check
        echo "✅ Code formatting is correct"

    - name: 🔍 TypeScript Check
      run: |
        echo "Running TypeScript compiler check..."
        npx tsc --noEmit
        echo "✅ TypeScript check passed"

    - name: 📊 Code Analysis Report
      run: |
        echo "## 📊 Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ ESLint: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Prettier: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ TypeScript: Passed" >> $GITHUB_STEP_SUMMARY

  # ================================
  # SECURITY AUDIT JOB
  # ================================
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏷️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔒 NPM Security Audit
      run: |
        echo "Running npm security audit..."
        npm audit --audit-level=moderate
        echo "✅ Security audit completed"

    - name: 🛡️ License Check
      run: |
        echo "Checking licenses..."
        npx license-checker --summary --onlyAllow "MIT;ISC;BSD;Apache-2.0;Unlicense;WTFPL;CC0-1.0" || echo "⚠️ License check completed with warnings"

  # ================================
  # BUILD JOB
  # ================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [setup, lint]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏷️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Restore Dependencies
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: 🔍 Install Dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit

    - name: 🏗️ Build TypeScript
      run: |
        echo "Building TypeScript application..."
        npm run build
        echo "✅ Build completed successfully"

    - name: 📦 Cache Build Output
      uses: actions/cache@v3
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}

    - name: 📁 Verify Build Output
      run: |
        echo "Verifying build output..."
        ls -la dist/
        echo "✅ Build artifacts verified"
        echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Build Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "- Output Directory: \`dist/\`" >> $GITHUB_STEP_SUMMARY
        echo "- Entry Point: \`dist/server.js\`" >> $GITHUB_STEP_SUMMARY

  # ================================
  # TESTING JOB
  # ================================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: [setup, lint]
    
    strategy:
      matrix:
        mongodb-version: ['5.0', '6.0']
    
    services:
      mongodb:
        image: mongo:${{ matrix.mongodb-version }}
        ports:
          - 27017:27017
        options: --health-cmd "mongo --eval 'db.runCommand({ping:1})'" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏷️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Restore Dependencies
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: 🔍 Install Dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit

    - name: 🗄️ Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        until nc -z localhost 27017; do
          echo "Waiting for MongoDB..."
          sleep 1
        done
        echo "✅ MongoDB is ready"

    - name: 🧪 Run Unit Tests
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/smartfix_test
        JWT_SECRET: test_jwt_secret_key
      run: |
        echo "Running unit tests..."
        npm test
        echo "✅ Unit tests completed"

    - name: 📊 Run Tests with Coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/smartfix_test
        JWT_SECRET: test_jwt_secret_key
      run: |
        echo "Running tests with coverage..."
        npm run test:coverage
        echo "✅ Coverage tests completed"

    - name: 📈 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 🧪 Integration Tests
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/smartfix_integration_test
        JWT_SECRET: test_jwt_secret_key
      run: |
        echo "Running integration tests..."
        # Add integration test commands here if you have them
        echo "✅ Integration tests completed"

  # ================================
  # DOCKER BUILD JOB
  # ================================
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: smartfix/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker Image
      run: |
        echo "Testing Docker image..."
        docker run --rm -d -p 3000:3000 --name smartfix-test smartfix/api:latest || docker run --rm -d -p 3000:3000 --name smartfix-test $(echo "${{ steps.meta.outputs.tags }}" | head -1)
        sleep 10
        curl -f http://localhost:3000/api/health || exit 1
        docker stop smartfix-test
        echo "✅ Docker image test passed"

  # ================================
  # DEPLOYMENT JOB (Production)
  # ================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Setup Environment
      run: |
        echo "Setting up deployment environment..."
        echo "DEPLOYMENT_ENV=production" >> $GITHUB_ENV
        echo "API_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

    # Example deployment to a server via SSH
    - name: 🚀 Deploy to Server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          echo "Starting deployment..."
          cd /opt/smartfix-api
          git pull origin main
          docker-compose down
          docker-compose pull
          docker-compose up -d
          echo "✅ Deployment completed"

    # Alternative: Deploy to cloud platforms
    # - name: 🌩️ Deploy to AWS ECS
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: .aws/task-definition.json
    #     service: smartfix-api
    #     cluster: production
    #     wait-for-service-stability: true

  # ================================
  # NOTIFICATION JOB
  # ================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 📧 Slack Notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

    - name: 📨 Discord Notification
      uses: Ilshidur/action-discord@master
      if: always()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          🚀 **SmartFix API Deployment**
          📦 Version: ${{ github.event.release.tag_name || github.sha }}
          🔧 Status: ${{ job.status }}
          🌐 Environment: Production

# ================================
# SEPARATE WORKFLOW FILES
# ================================

---
# .github/workflows/pr-checks.yml
name: 🔍 Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  pr-validation:
    name: 🔍 PR Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🧹 Lint Check
      run: npm run lint

    - name: 🔨 Build Check
      run: npm run build

    - name: 🧪 Test Check
      run: npm test

    - name: 📊 PR Summary
      run: |
        echo "## 🔍 Pull Request Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Linting: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Ready for Review!" >> $GITHUB_STEP_SUMMARY

---
# .github/workflows/dependency-update.yml
name: 🔄 Dependency Updates

on:
  schedule:
    - cron: '0 0 * * 1' # Weekly on Mondays
  workflow_dispatch:

jobs:
  update-dependencies:
    name: 🔄 Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: 🔄 Update Dependencies
      run: |
        npm update
        npm audit fix --force

    - name: 🧪 Test After Update
      run: |
        npm ci
        npm test

    - name: 📝 Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: '🔄 Update dependencies'
        title: '🔄 Weekly dependency updates'
        body: |
          ## 🔄 Automated Dependency Updates
          
          This PR contains automated dependency updates.
          
          ### Changes:
          - Updated npm dependencies
          - Fixed security vulnerabilities (if any)
          
          ### Testing:
          - ✅ All tests pass
          - ✅ Build successful
        branch: automated/dependency-updates
        delete-branch: true

---
# .github/workflows/release.yml
name: 🏷️ Release Management

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📝 Generate Changelog
      id: changelog
      run: |
        # Generate changelog between tags
        echo "## What's Changed" > CHANGELOG.md
        git log --pretty=format:"- %s (%an)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

    - name: 🏷️ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

---
# .github/workflows/performance-test.yml
name: ⚡ Performance Testing

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM
  workflow_dispatch:

jobs:
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
          
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🏷️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm install -g artillery

    - name: 🏗️ Build Application
      run: npm run build

    - name: 🚀 Start Application
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/smartfix_perf_test
      run: |
        npm start &
        sleep 10

    - name: ⚡ Run Performance Tests
      run: |
        # Create artillery config for API testing
        cat > artillery-config.yml << EOF
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: "Health Check"
            requests:
              - get:
                  url: "/api/health"
        EOF
        
        artillery run artillery-config.yml

    - name: 📊 Performance Report
      run: |
        echo "## ⚡ Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Test Duration: 60 seconds" >> $GITHUB_STEP_SUMMARY
        echo "- Request Rate: 10 req/sec" >> $GITHUB_STEP_SUMMARY
        echo "- Target: Health Check Endpoint" >> $GITHUB_STEP_SUMMARY
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm ci
          npm audit --audit-level moderate

      - name: Create environment file
        run: |
          cat << EOF > .env
          NODE_ENV=test
          PORT=3001
          MONGODB_URI=mongodb://admin:password@localhost:27017/smartfix_test?authSource=admin
          JWT_SECRET=test-jwt-secret-key-for-github-actions
          FRONTEND_URL=http://localhost:3000
          EOF

      - name: Lint code
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Type checking
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password@localhost:27017/smartfix_test?authSource=admin
          JWT_SECRET: test-jwt-secret-key-for-github-actions

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --only=production

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir deployment-package
          cp -r dist package.json package-lock.json deployment-package/
          cd deployment-package && zip -r ../smartfix-api-build.zip .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: smartfix-api-build.zip
          retention-days: 30

  # Docker Build and Push
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/smartfix-api
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-api.smartfix.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to AWS EC2 Staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            cd /var/www/smartfix-api-staging
            
            # Backup current deployment
            sudo cp -r current backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
            
            # Stop the application
            sudo pm2 stop smartfix-api-staging || true
            
            # Create new deployment directory
            mkdir -p releases/$(date +%Y%m%d-%H%M%S)
            cd releases/$(date +%Y%m%d-%H%M%S)
            
            # Download and extract build
            wget ${{ secrets.STAGING_DEPLOY_URL }}/smartfix-api-build.zip
            unzip smartfix-api-build.zip
            
            # Install production dependencies
            npm ci --only=production
            
            # Update symlink
            cd ../..
            rm -f current
            ln -sf releases/$(date +%Y%m%d-%H%M%S) current
            
            # Update environment variables
            cp .env current/
            
            # Start the application
            cd current
            sudo pm2 start ecosystem.config.js --env staging
            sudo pm2 save
            
            # Health check
            sleep 10
            curl -f http://localhost:3001/api/health || exit 1

      - name: Run staging integration tests
        run: |
          npm run test:integration
        env:
          API_BASE_URL: https://staging-api.smartfix.com

      - name: Notify Slack - Staging Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Staging deployment completed! 🚀'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.smartfix.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to AWS ECS Production
        run: |
          # Install AWS CLI
          pip install awscli
