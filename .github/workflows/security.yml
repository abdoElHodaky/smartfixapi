name: 🔒 Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  # ============================================================================
  # DEPENDENCY VULNERABILITY SCAN
  # ============================================================================
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: 📊 Upload npm audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: npm-audit.json

      - name: 🕵️ Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json
        continue-on-error: true

      - name: 📊 Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk-results.json

      - name: 📋 Generate security report
        if: always()
        run: |
          echo "# 🔒 Security Scan Results" > security-report.md
          echo "" >> security-report.md
          echo "## NPM Audit Results" >> security-report.md
          if [ -f npm-audit.json ]; then
            echo "```json" >> security-report.md
            cat npm-audit.json >> security-report.md
            echo "```" >> security-report.md
          fi
          echo "" >> security-report.md
          echo "## Snyk Results" >> security-report.md
          if [ -f snyk-results.json ]; then
            echo "```json" >> security-report.md
            cat snyk-results.json >> security-report.md
            echo "```" >> security-report.md
          fi

      - name: 📊 Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: security-report.md

  # ============================================================================
  # SECRET SCANNING
  # ============================================================================
  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔐 TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json
        continue-on-error: true

      - name: 📝 Save TruffleHog results
        if: always()
        run: |
          # Create empty results file if TruffleHog didn't create one
          if [ ! -f trufflehog-results.json ]; then
            echo "[]" > trufflehog-results.json
          fi

      - name: 🔍 GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 📊 Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            trufflehog-results.json
            gitleaks-report.json

  # ============================================================================
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # ============================================================================
  sast-scan:
    name: 🛡️ Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 ESLint security scan
        run: |
          npx eslint . --ext .js,.ts --format json --output-file eslint-security.json || true
          npx eslint . --ext .js,.ts

      - name: 🛡️ Semgrep SAST scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/nodejs
          generateSarif: "1"

      - name: 📊 Upload SARIF results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: 🔍 CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

  # ============================================================================
  # DOCKER IMAGE SECURITY SCAN
  # ============================================================================
  docker-scan:
    name: 🐳 Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: smartfix-api:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'smartfix-api:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Snyk Docker scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: smartfix-api:security-scan
          args: --severity-threshold=high --json > snyk-docker-results.json
        continue-on-error: true

      - name: 📊 Upload Docker scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-security-results
          path: |
            trivy-results.sarif
            snyk-docker-results.json

  # ============================================================================
  # INFRASTRUCTURE SECURITY SCAN
  # ============================================================================
  infrastructure-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: 📊 Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: 🔍 Kubernetes security scan
        if: hashFiles('k8s/**/*.yaml') != ''
        run: |
          # Install kubesec
          curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
            | grep -o '"browser_download_url": "[^"]*kubesec_linux_amd64.tar.gz"' \
            | sed 's/"browser_download_url": "//' | sed 's/"//' \
            | xargs curl -sSL | tar xz
          
          # Scan Kubernetes manifests
          find k8s -name "*.yaml" -exec ./kubesec scan {} \; > kubesec-results.json

      - name: 📊 Upload Kubernetes scan results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('k8s/**/*.yaml') != ''
        with:
          name: kubernetes-security-results
          path: kubesec-results.json

  # ============================================================================
  # SECURITY COMPLIANCE CHECK
  # ============================================================================
  compliance-check:
    name: ✅ Security Compliance Check
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast-scan, docker-scan, infrastructure-scan]
    if: always()
    
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4

      - name: 📋 Generate compliance report
        run: |
          echo "# 🔒 Security Compliance Report" > compliance-report.md
          echo "" >> compliance-report.md
          echo "Generated on: $(date)" >> compliance-report.md
          echo "Commit: ${{ github.sha }}" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## 📊 Scan Results Summary" >> compliance-report.md
          echo "| Scan Type | Status |" >> compliance-report.md
          echo "|-----------|--------|" >> compliance-report.md
          echo "| 🔍 Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> compliance-report.md
          echo "| 🔐 Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> compliance-report.md
          echo "| 🛡️ SAST Scan | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> compliance-report.md
          echo "| 🐳 Docker Scan | ${{ needs.docker-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> compliance-report.md
          echo "| 🏗️ Infrastructure Scan | ${{ needs.infrastructure-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> compliance-report.md
          echo "" >> compliance-report.md
          
          # Check for critical issues
          CRITICAL_ISSUES=0
          
          if [ -d "npm-audit-results" ]; then
            echo "## 📦 NPM Audit Results" >> compliance-report.md
            if [ -f "npm-audit-results/npm-audit.json" ]; then
              CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-results/npm-audit.json)
              HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-results/npm-audit.json)
              CRITICAL_ISSUES=$((CRITICAL_ISSUES + CRITICAL_COUNT + HIGH_COUNT))
              echo "- Critical vulnerabilities: $CRITICAL_COUNT" >> compliance-report.md
              echo "- High vulnerabilities: $HIGH_COUNT" >> compliance-report.md
            fi
          fi
          
          echo "" >> compliance-report.md
          echo "## 🎯 Compliance Status" >> compliance-report.md
          if [ $CRITICAL_ISSUES -eq 0 ]; then
            echo "✅ **COMPLIANT** - No critical security issues found" >> compliance-report.md
          else
            echo "❌ **NON-COMPLIANT** - $CRITICAL_ISSUES critical security issues found" >> compliance-report.md
          fi

      - name: 📊 Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: compliance-report.md

      - name: 📢 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # ============================================================================
  # SECURITY NOTIFICATION
  # ============================================================================
  security-notification:
    name: 🚨 Security Notification
    runs-on: ubuntu-latest
    needs: [compliance-check]
    if: failure() || (always() && github.event_name == 'schedule')
    
    steps:
      - name: 🚨 Slack security alert
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#security-alerts'
          username: 'Security Bot'
          icon_emoji: ':warning:'
          custom_payload: |
            {
              "attachments": [{
                "color": "danger",
                "title": "🚨 Security Scan Alert - SmartFix API",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Trigger",
                    "value": "${{ github.event_name }}",
                    "short": true
                  },
                  {
                    "title": "Action",
                    "value": "Review security scan results and address critical issues",
                    "short": false
                  }
                ],
                "actions": [{
                  "type": "button",
                  "text": "View Results",
                  "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: 📧 Email security team
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 Security Alert: SmartFix API"
          to: ${{ secrets.SECURITY_TEAM_EMAIL }}
          from: "Security Bot <security@smartfix.com>"
          body: |
            Security scan has detected potential issues in SmartFix API.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Trigger: ${{ github.event_name }}
            
            Please review the security scan results and address any critical issues immediately.
            
            View Results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            This is an automated message from the SmartFix Security System.
