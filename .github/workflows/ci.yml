name: 🧪 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # ============================================================================
  # LINT AND FORMAT CHECK
  # ============================================================================
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 💅 Check Prettier formatting
        run: npm run format:check

      - name: 📝 TypeScript type check
        run: npm run type-check

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: npm audit --audit-level=moderate

      - name: 🕵️ Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🔐 Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ============================================================================
  # UNIT TESTS
  # ============================================================================
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18.x'
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  test-integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: smartfix_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⏳ Wait for MongoDB
        run: |
          until mongosh --host localhost:27017 --eval "print('MongoDB is ready')" > /dev/null 2>&1; do
            echo "Waiting for MongoDB..."
            sleep 2
          done

      - name: 🔗 Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/smartfix_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-ci
          JWT_EXPIRES_IN: 1h

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: integration
          name: integration-tests

  # ============================================================================
  # E2E TESTS
  # ============================================================================
  test-e2e:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: smartfix_e2e
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start application in background
        run: |
          npm start &
          echo $! > app.pid
        env:
          NODE_ENV: test
          PORT: 3000
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/smartfix_e2e?authSource=admin
          JWT_SECRET: test-jwt-secret-key-for-e2e
          JWT_EXPIRES_IN: 1h

      - name: ⏳ Wait for application to start
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: 🎭 Run E2E tests
        run: npm run test:e2e
        env:
          API_BASE_URL: http://localhost:3000

      - name: 🛑 Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi

  # ============================================================================
  # PERFORMANCE TESTS
  # ============================================================================
  test-performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: smartfix_perf
        ports:
          - 27017:27017

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm start &
          echo $! > app.pid
        env:
          NODE_ENV: production
          PORT: 3000
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/smartfix_perf?authSource=admin
          JWT_SECRET: test-jwt-secret-key-for-perf

      - name: ⏳ Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: ⚡ Run performance tests
        run: npm run test:performance

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: performance-results/

      - name: 🛑 Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

  # ============================================================================
  # BUILD AND DOCKER
  # ============================================================================
  build:
    name: 🏗️ Build & Docker
    runs-on: ubuntu-latest
    needs: [lint, security, test-unit, test-integration]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            dist/
            package.json
            package-lock.json

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/smartfix-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # QUALITY GATE
  # ============================================================================
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, security, test-unit, test-integration, test-e2e, build]
    if: always()
    
    steps:
      - name: 🔍 Check job results
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.test-unit.result }}" != "success" || 
                "${{ needs.test-integration.result }}" != "success" || 
                "${{ needs.test-e2e.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Quality gate failed!"
            exit 1
          else
            echo "✅ Quality gate passed!"
          fi

      - name: 📊 Quality Gate Summary
        run: |
          echo "## 🚪 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Lint | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security.result == 'success' && '✅ Passed' || '⚠️ Warning' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Unit Tests | ${{ needs.test-unit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 Integration Tests | ${{ needs.test-integration.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎭 E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

