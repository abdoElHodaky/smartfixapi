name: 🚀 Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["🧪 Continuous Integration"]
    branches: [ main ]
    types: [ completed ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # DEPLOYMENT PREPARATION
  # ============================================================================
  prepare:
    name: 🎯 Prepare Deployment
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
      deploy: ${{ steps.should-deploy.outputs.deploy }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date +%Y%m%d)-${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: 🌍 Determine environment
        id: environment
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            ENVIRONMENT="production"
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="development"
          fi
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "Environment: $ENVIRONMENT"

      - name: 🤔 Should deploy?
        id: should-deploy
        run: |
          if [[ "${{ github.event_name }}" == "push" ]] || [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # BUILD PRODUCTION IMAGE
  # ============================================================================
  build-image:
    name: 🐳 Build Production Image
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.deploy == 'true'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=${{ needs.prepare.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [prepare, build-image]
    if: needs.prepare.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging-api.smartfix.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🎯 Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name smartfix-staging

      - name: 🚀 Deploy to Kubernetes
        run: |
          # Update deployment image
          kubectl set image deployment/smartfix-api-staging \
            smartfix-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }} \
            -n smartfix-staging
          
          # Wait for rollout
          kubectl rollout status deployment/smartfix-api-staging -n smartfix-staging --timeout=300s

      - name: 🔍 Verify deployment
        run: |
          # Check if pods are running
          kubectl get pods -n smartfix-staging -l app=smartfix-api
          
          # Health check
          sleep 30
          kubectl exec -n smartfix-staging deployment/smartfix-api-staging -- curl -f http://localhost:3000/health

      - name: 🧪 Run smoke tests
        run: |
          # Run basic smoke tests against staging
          npm ci
          npm run test:smoke
        env:
          API_BASE_URL: https://staging-api.smartfix.com
          API_KEY: ${{ secrets.STAGING_API_KEY }}

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [prepare, build-image, deploy-staging]
    if: needs.prepare.outputs.environment == 'production'
    environment:
      name: production
      url: https://api.smartfix.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION_PROD }}

      - name: 🎯 Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION_PROD }} --name smartfix-production

      - name: 📊 Pre-deployment checks
        run: |
          # Check cluster health
          kubectl get nodes
          kubectl get pods -n smartfix-production
          
          # Check current deployment status
          kubectl get deployment smartfix-api-production -n smartfix-production

      - name: 🚀 Blue-Green Deployment
        run: |
          # Create new deployment with green suffix
          kubectl create deployment smartfix-api-green \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }} \
            -n smartfix-production \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Scale green deployment
          kubectl scale deployment smartfix-api-green --replicas=3 -n smartfix-production
          
          # Wait for green deployment
          kubectl rollout status deployment/smartfix-api-green -n smartfix-production --timeout=300s

      - name: 🔍 Health check green deployment
        run: |
          # Wait for pods to be ready
          sleep 60
          
          # Get green pod and test health
          GREEN_POD=$(kubectl get pods -n smartfix-production -l app=smartfix-api-green -o jsonpath='{.items[0].metadata.name}')
          kubectl exec -n smartfix-production $GREEN_POD -- curl -f http://localhost:3000/health

      - name: 🔄 Switch traffic to green
        run: |
          # Update service to point to green deployment
          kubectl patch service smartfix-api-service -n smartfix-production \
            -p '{"spec":{"selector":{"app":"smartfix-api-green"}}}'

      - name: 🧪 Production smoke tests
        run: |
          # Run smoke tests against production
          npm ci
          npm run test:smoke
        env:
          API_BASE_URL: https://api.smartfix.com
          API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

      - name: 🧹 Cleanup old deployment
        run: |
          # Remove old blue deployment
          kubectl delete deployment smartfix-api-production -n smartfix-production --ignore-not-found=true
          
          # Rename green to production
          kubectl patch deployment smartfix-api-green -n smartfix-production \
            -p '{"metadata":{"name":"smartfix-api-production"}}'

      - name: 📊 Post-deployment verification
        run: |
          # Final health checks
          kubectl get pods -n smartfix-production
          kubectl get services -n smartfix-production
          
          # Check application metrics
          sleep 30
          curl -f https://api.smartfix.com/health
          curl -f https://api.smartfix.com/metrics

  # ============================================================================
  # DATABASE MIGRATIONS
  # ============================================================================
  migrate-database:
    name: 🗄️ Database Migration
    runs-on: ubuntu-latest
    needs: [prepare]
    if: needs.prepare.outputs.deploy == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Run database migrations
        run: npm run migrate
        env:
          NODE_ENV: ${{ needs.prepare.outputs.environment }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: 🌱 Seed database (staging only)
        if: needs.prepare.outputs.environment == 'staging'
        run: npm run seed
        env:
          NODE_ENV: staging
          MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}

  # ============================================================================
  # MONITORING AND ALERTS
  # ============================================================================
  setup-monitoring:
    name: 📊 Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: 📊 Update Datadog deployment markers
        uses: DataDog/datadog-ci-action@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          app-key: ${{ secrets.DATADOG_APP_KEY }}
          command: deployment
          service: smartfix-api
          env: ${{ needs.prepare.outputs.environment }}
          version: ${{ needs.prepare.outputs.version }}

      - name: 🚨 Setup alerts
        run: |
          # Create deployment success/failure alerts
          curl -X POST "https://api.datadoghq.com/api/v1/events" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "title": "SmartFix API Deployment",
              "text": "Deployment ${{ needs.prepare.outputs.version }} to ${{ needs.prepare.outputs.environment }} completed",
              "priority": "normal",
              "tags": ["environment:${{ needs.prepare.outputs.environment }}", "service:smartfix-api"],
              "alert_type": "success"
            }'

  # ============================================================================
  # NOTIFICATION
  # ============================================================================
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging, deploy-production, setup-monitoring]
    if: always()
    
    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: 'GitHub Actions'
          icon_emoji: ':rocket:'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "title": "SmartFix API Deployment",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "${{ needs.prepare.outputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Version",
                    "value": "${{ needs.prepare.outputs.version }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "${{ job.status }}",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 SmartFix API Deployment Failed"
          to: ${{ secrets.TEAM_EMAIL }}
          from: "GitHub Actions <noreply@smartfix.com>"
          body: |
            Deployment of SmartFix API failed!
            
            Environment: ${{ needs.prepare.outputs.environment }}
            Version: ${{ needs.prepare.outputs.version }}
            Commit: ${{ github.sha }}
            
            Please check the GitHub Actions logs for more details.
            
            Link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

