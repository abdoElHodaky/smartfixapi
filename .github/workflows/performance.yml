name: ⚡ Performance Testing

on:
  push:
    branches: [ main, develop ]
 # pull_request:
  #  branches: [ main, develop ]
  schedule:
    # Run performance tests daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration in minutes'
        required: false
        default: '5'
      users:
        description: 'Number of virtual users'
        required: false
        default: '50'

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # ============================================================================
  # LOAD TESTING
  # ============================================================================
  load-testing:
    name: 🏋️ Load Testing
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: smartfix_perf
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm start &
          echo $! > app.pid
        env:
          NODE_ENV: production
          PORT: 3000
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/smartfix_perf?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-performance

      - name: ⏳ Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: 🏋️ Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🏋️ Run load tests
        run: |
          k6 run --out json=load-test-results.json tests/performance/load-test.js
        env:
          API_BASE_URL: http://localhost:3000
          DURATION: ${{ github.event.inputs.duration || '5' }}m
          VUS: ${{ github.event.inputs.users || '50' }}

      - name: 📊 Generate performance report
        run: |
          node tests/performance/generate-report.js load-test-results.json > performance-report.json

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: |
            load-test-results.json
            performance-report.json

      - name: 🛑 Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

  # ============================================================================
  # STRESS TESTING
  # ============================================================================
  stress-testing:
    name: 💪 Stress Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: smartfix_stress
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start application with monitoring
        run: |
          # Start application with memory and CPU monitoring
          npm start &
          echo $! > app.pid
          
          # Start monitoring script
          node tests/performance/monitor.js &
          echo $! > monitor.pid
        env:
          NODE_ENV: production
          PORT: 3000
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/smartfix_stress?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-stress

      - name: ⏳ Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: 🏋️ Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 💪 Run stress tests
        run: |
          k6 run --out json=stress-test-results.json tests/performance/stress-test.js
        env:
          API_BASE_URL: http://localhost:3000

      - name: 📊 Generate stress test report
        run: |
          node tests/performance/generate-report.js stress-test-results.json > stress-report.json

      - name: 📊 Upload stress test results
        uses: actions/upload-artifact@v3
        with:
          name: stress-test-results
          path: |
            stress-test-results.json
            stress-report.json
            monitoring-data.json

      - name: 🛑 Stop processes
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi
          if [ -f monitor.pid ]; then
            kill $(cat monitor.pid) || true
          fi

  # ============================================================================
  # SPIKE TESTING
  # ============================================================================
  spike-testing:
    name: 📈 Spike Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: smartfix_spike
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm start &
          echo $! > app.pid
        env:
          NODE_ENV: production
          PORT: 3000
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/smartfix_spike?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-spike

      - name: ⏳ Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: 🏋️ Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 📈 Run spike tests
        run: |
          k6 run --out json=spike-test-results.json tests/performance/spike-test.js
        env:
          API_BASE_URL: http://localhost:3000

      - name: 📊 Generate spike test report
        run: |
          node tests/performance/generate-report.js spike-test-results.json > spike-report.json

      - name: 📊 Upload spike test results
        uses: actions/upload-artifact@v3
        with:
          name: spike-test-results
          path: |
            spike-test-results.json
            spike-report.json

      - name: 🛑 Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

  # ============================================================================
  # ENDURANCE TESTING
  # ============================================================================
  endurance-testing:
    name: 🏃 Endurance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 120
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: smartfix_endurance
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start application with monitoring
        run: |
          npm start &
          echo $! > app.pid
          
          # Start memory leak detection
          node tests/performance/memory-monitor.js &
          echo $! > memory-monitor.pid
        env:
          NODE_ENV: production
          PORT: 3000
          MONGODB_URI: mongodb://testuser:testpass@localhost:27017/smartfix_endurance?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-for-endurance

      - name: ⏳ Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: 🏋️ Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🏃 Run endurance tests (60 minutes)
        run: |
          k6 run --out json=endurance-test-results.json tests/performance/endurance-test.js
        env:
          API_BASE_URL: http://localhost:3000

      - name: 📊 Generate endurance test report
        run: |
          node tests/performance/generate-report.js endurance-test-results.json > endurance-report.json

      - name: 🔍 Analyze memory leaks
        run: |
          node tests/performance/analyze-memory.js memory-data.json > memory-analysis.json

      - name: 📊 Upload endurance test results
        uses: actions/upload-artifact@v3
        with:
          name: endurance-test-results
          path: |
            endurance-test-results.json
            endurance-report.json
            memory-data.json
            memory-analysis.json

      - name: 🛑 Stop processes
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi
          if [ -f memory-monitor.pid ]; then
            kill $(cat memory-monitor.pid) || true
          fi

  # ============================================================================
  # PERFORMANCE ANALYSIS
  # ============================================================================
  performance-analysis:
    name: 📊 Performance Analysis
    runs-on: ubuntu-latest
    needs: [load-testing, stress-testing, spike-testing, endurance-testing]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📥 Download all test results
        uses: actions/download-artifact@v3

      - name: 📊 Generate comprehensive performance report
        run: |
          node tests/performance/comprehensive-analysis.js > comprehensive-performance-report.json

      - name: 📈 Generate performance trends
        run: |
          # Compare with previous results if available
          node tests/performance/trend-analysis.js > performance-trends.json

      - name: 🎯 Performance benchmarks check
        run: |
          node tests/performance/benchmark-check.js comprehensive-performance-report.json > benchmark-results.json

      - name: 📊 Upload comprehensive results
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-performance-analysis
          path: |
            comprehensive-performance-report.json
            performance-trends.json
            benchmark-results.json

      - name: 📋 Generate performance summary
        run: |
          echo "# ⚡ Performance Test Summary" > performance-summary.md
          echo "" >> performance-summary.md
          echo "Generated on: $(date)" >> performance-summary.md
          echo "Commit: ${{ github.sha }}" >> performance-summary.md
          echo "" >> performance-summary.md
          
          echo "## 📊 Test Results" >> performance-summary.md
          echo "| Test Type | Status | Key Metrics |" >> performance-summary.md
          echo "|-----------|--------|-------------|" >> performance-summary.md
          echo "| 🏋️ Load Test | ${{ needs.load-testing.result == 'success' && '✅ Passed' || '❌ Failed' }} | Response time, Throughput |" >> performance-summary.md
          echo "| 💪 Stress Test | ${{ needs.stress-testing.result == 'success' && '✅ Passed' || '❌ Failed' }} | Breaking point, Recovery |" >> performance-summary.md
          echo "| 📈 Spike Test | ${{ needs.spike-testing.result == 'success' && '✅ Passed' || '❌ Failed' }} | Spike handling, Stability |" >> performance-summary.md
          echo "| 🏃 Endurance Test | ${{ needs.endurance-testing.result == 'success' && '✅ Passed' || '❌ Failed' }} | Memory leaks, Long-term stability |" >> performance-summary.md
          
          # Add benchmark comparison if available
          if [ -f benchmark-results.json ]; then
            echo "" >> performance-summary.md
            echo "## 🎯 Benchmark Comparison" >> performance-summary.md
            node -e "
              const results = JSON.parse(require('fs').readFileSync('benchmark-results.json', 'utf8'));
              console.log('- Response Time: ' + (results.responseTime.passed ? '✅ Within limits' : '❌ Exceeds limits'));
              console.log('- Throughput: ' + (results.throughput.passed ? '✅ Meets requirements' : '❌ Below requirements'));
              console.log('- Error Rate: ' + (results.errorRate.passed ? '✅ Acceptable' : '❌ Too high'));
            " >> performance-summary.md
          fi

      - name: 📊 Upload performance summary
        uses: actions/upload-artifact@v3
        with:
          name: performance-summary
          path: performance-summary.md

      - name: 📢 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('performance-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # ============================================================================
  # PERFORMANCE NOTIFICATION
  # ============================================================================
  performance-notification:
    name: 📢 Performance Notification
    runs-on: ubuntu-latest
    needs: [performance-analysis]
    if: always()
    
    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#performance'
          username: 'Performance Bot'
          icon_emoji: ':chart_with_upwards_trend:'
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ needs.performance-analysis.result == 'success' && 'good' || 'warning' }}",
                "title": "⚡ Performance Test Results - SmartFix API",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Trigger",
                    "value": "${{ github.event_name }}",
                    "short": true
                  },
                  {
                    "title": "Overall Status",
                    "value": "${{ needs.performance-analysis.result == 'success' && '✅ All tests passed' || '⚠️ Some tests failed' }}",
                    "short": true
                  }
                ],
                "actions": [{
                  "type": "button",
                  "text": "View Results",
                  "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.PERFORMANCE_SLACK_WEBHOOK_URL }}

